---
title: "Joining datasets"
---

```{r, echo = FALSE, message = FALSE, warning = FALSE, error = FALSE}
library(tidyverse)
library(janitor)

costofliving <- readRDS("../datafolder/costofliving2.rds")
```

It is seldom the case that all the data we need exists in one dataset from the beginning. Usually, we have to put together several datasets to get all the variables we want in *one* dataset. This process is called *joining* dataset (also known as *merging*). We'll learn about `left_join`, `right_join`, `inner_join` and `full_join` to join datasets. However, joining datasets can be quite tricky. Sometimes, the codes might not run and it can be difficult to understand why, and sometimes, the code might run and the result becomes utterly wrong. We need to have a good overview of what exactly the two datasets show. Therefore, before we do the joining, we'll have a look at the necessary steps first.

## Which variables do you need?

We'll join the `costofliving` dataset with a dataset on welfare institutions. You can find the dataset [here](https://www.lisdatacenter.org/news-and-events/comparative-welfare-states-dataset-2020/) and the codebook [here](https://www.lisdatacenter.org/wp-content/uploads/CWS-codebook-2020.pdf). Because the dataset has 400 variables to begin with, it's a good idea to use the codebook to check which variables you might need and `select` these into a smaller dataset.

-   **id**: The country variable in three letters (e.g. Norway becomes NOR)
-   **year**: The relevant year of the observation
-   **mgini**: Measure of income inequality before taxes and redistribution[^13_joins-1].
-   **ngini**: Measure of income inequality after taxes and redistribution[^13_joins-2]
-   **rred**: Relative redistribution[^13_joins-3]
-   **lowpay**: Incidence of low pay[^13_joins-4].

[^13_joins-1]: Market (Pre-Tax-and-Transfer) GINI Coefficient. Household income, whole population.

[^13_joins-2]: Net (Post-Tax-and-Transfer) GINI Coefficient Household income, whole population.

[^13_joins-3]: Relative Redistribution; market-income inequality minus net-income inequality, divided by market-income inequality. Household income, whole population.

[^13_joins-4]: Defined as the percentage of workers earning less than two thirds of the median wage

The dataset is in `.xlsx` format. To read in this type of data, we can load the package `readxl` and use the function `read_excel`. Then we can use `select` to fetch the variables we want and make a smaller dataset (often called a *subset*).

```{r}
library(readxl)

welfare <- read_excel("../datafolder/CWS-data-2020.xlsx")

welfare_subset <- welfare %>%
  select(id, year, mgini, ngini, rred, lowpay)
```

## What will be the units in your final dataset?

### Aggregation level

When we join datasets, what we want to to **add variables to the units we already have**. So, in this case, we would like to add variables on redistribution to the cost of living in different cities. But there's a problem. Even though *city* is our smallest units in the `costofliving` dataset, it is not present in the `welfare_subset` dataset. Here, the smallest units are countries.

```{r}
glimpse(costofliving)
glimpse(welfare_subset)
```

Since we cannot break the country variable in the `welfare_subset` dataset down to cities (because we simply do not know which part of the variables belong to which cities), we have to go the other way and aggregate the variables in the `costofliving` dataset up to country level. We can do this through `summarise` and `mean`, as shown below. I use `mean` instead of `sum` because it doesn't make that much sense to add up index values. Now, we find the average cost of living in each country compared to New York, based on their biggest cities.

```{r}

costofliving_agg <- costofliving %>%
  group_by(country) %>% # Find the following statistic per country
  summarise(cofi = mean(cofi, na.rm = TRUE), # The average cost of living based on the biggest cities in that country
            rent_index = mean(rent_index, na.rm = TRUE),
            groceries_index = mean(groceries_index, na.rm = TRUE),
            restaurant_price_index = mean(restaurant_price_index, na.rm = TRUE),
            local_purchasing_power_index = mean(local_purchasing_power_index, na.rm = TRUE))

```

Alternatively, if you want to be a bit more advanced and do it with less code, you can use `summarise_at` and make a function.

```{r}
costofliving %>%
  group_by(country) %>%
  summarise_at(vars("cofi", "rent_index", "groceries_index", "restaurant_price_index", "local_purchasing_power_index"), 
               function(x){mean(x, na.rm = TRUE)}) # This function is equivalent to the one above, but with less lines of code
```

### Time aspect

Another thing to consider is the time aspect. Our `welfare_subset` data has data from 1960 to 2018. Our `costofliving` dataset has only data from 2022. In theory, we cannot really merge the datasets then, because we do not know the cost of living in any of the years of the welfare data, and vice versa. However, doing a rough approximation, we can pick a late year in the `welfare_subset` dataset with sufficiently complete values and assume that the variables do not change enough from year to year, so that within a ten-year period, it should correspond more or less.

```{r}

welfare_subset <- welfare_subset %>%
  filter(year == 2015) %>% # Filtering out the value on year that is 2015
  select(-year) # Removing the variable year since it now only has one value, 2015

```

## Do the units have the same name?

The next thing to tackle is the so-called *key* of the datasets. The *key* is the variable or variables in the two datasets that are the same. Often, it is for example an id of a person, a country name and/or a time period such as a date or a year. In our case, there's only one shared key between the datasets -- country.

```{r, out.width="100%", echo = FALSE, fig.show="hold"}
knitr::include_graphics("../figures/joins.png")
```

The *key* needs to have the same values. Here, we bump into another issue. The variables indicating the countries in the `welfare_subset` and the `costofliving` datasets struggle with two problems to be a shared key: (1) the variables are called different things (id in `welfare_subset` and country in `costofliving`), and (2) they have different labels for the same values (e.g. Australia is AUS in `welfare_subset` but Australia in `costofliving`).

To change this, we could use `case_when` together with `mutate` and recode every value.

```{r}

welfare_subset %>%
  mutate(country = case_when( # Make a new variable called country
    id == "AUS" ~ "Australia", # When the variable id is "AUS", give the country variable value "Australia"
    id == "BEL" ~ "Belgium",
    id == "CAN" ~ "Canada"
  ))

```

This is a bit time consuming, so we'll use a shortcut here through the `countrycode` package. This package gives a standardized framework to recode country variables into new values (as you might understand, different values on country variables has been a pain for many joining problems).

```{r}

library(countrycode)

welfare_subset <- welfare_subset %>%
  mutate(country = countrycode(sourcevar = id, # Use the id variable to find the country name
                                 origin = "iso3c", # The inital variable has three letters for countries, also called the iso3c standard
                                 destination = "country.name")) # Recode these into full country names (in English)

```

The warning message tells us that `R` was unable to translate all the values. Usually, we might want to look further into this and perhaps manually recode these variables (e.g. using `case_when`). However, since I won't use this data in any analysis today, I'll simply proceed to the joining.

One last thing that need to be done, is to remove whitespace from the `country` variable in `costofliving`. See more about this in the part on strings.

```{r}

costofliving_agg <- costofliving_agg %>%
  mutate(country = str_squish(country))

```

## What kind of join do you need?

There are four main types of joins in `R`:

-   `inner_join`
-   `left_join`
-   `right_join`
-   `full_join`

Which one to use depends on which rows it is important to keep onwards. If you only want the units that match perfectly on the key(s) of the two datasets, use `inner_join`. If you want to keep all units in the left dataset, use `left_join`, and if it is more important to maintain the units in the right dataset, use `right_join`. `full_join` keeps all units.

```{r, out.width="80%", echo = FALSE, fig.show="hold"}
knitr::include_graphics("../figures/join-venn.png")
```

The `left_join` function is the most used, possibly because it's more intuitive. You start with a dataset, keep all the rows, and add variables to the rows you have. Here, I use `left_join`, keeping all the units in the `costofliving_agg` dataset. The *key* is `country` -- to specify this, add `by = "country"`.

```{r}
costofliving_agg %>%
  left_join(welfare_subset, by = "country")
```

Many `NA` are generated from using `left_join`. That's because values on the country variable such as `NY` and `HI` are not shared between the two datasets. What we get is 162 rows with lots of missing. If we use a `right_join`, we lose many of these rows -- now we only have 22 -- but they mostly have full data.

```{r}
costofliving_agg %>%
  right_join(welfare_subset, by = "country")
```

Using `inner_join` keeps only the rows where the values can be matched between the two datasets. Now, we have lots of information (less missing), but only 11 rows.

```{r}
costofliving_agg %>%
  inner_join(welfare_subset, by = "country")
```

Last, `full_join` keeps all units, matching the ones it can match and adding missing values to the rest. This dataset contains 173 rows[^13_joins-5].

[^13_joins-5]: This is composed of 162 rows from the `costofliving_agg` dataset plus 22 rows from the `welfare_subset` dataset, minus the 11 rows that they share

```{r}
costofliving_agg %>%
  full_join(welfare_subset, by = "country")
```

```{r, out.width="50%", echo = FALSE, fig.show="hold"}
knitr::include_graphics("../figures/jointypes1.png")
knitr::include_graphics("../figures/jointypes2.png")
```
