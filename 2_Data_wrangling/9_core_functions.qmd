---
title: "Core functions"
author: "Solveig Bj√∏rkholt"
---

## The dataset we are working on:

```{r, echo=FALSE, message = FALSE, warning=FALSE, error = FALSE}
library(tidyverse)
load("../datafolder/costofliving.RData")
costofliving <- as_tibble(costofliving)
DT::datatable(costofliving)
```

## `tidyverse` functions

After having imported the data into `R`, there is usually a bit of tidying that has to be done. We are going to learn how to do this through the `tidyverse` package. This package is fundamental to many operations in `R`. One of the main components of the `tidyverse` package is the `%>%`, also known as the pipe. The pipe allows us to access an object and apply functions to it in sequence. For example, if the object is `me`, the first function could be to `wake_up()`, then to the me that has woken up, `shower()`, and then to the me who has woken up and taken a shower, to `drink_coffee()`. This would look like below:

```{r, eval = FALSE}

me %>%
  wake_up() %>%
  shower() %>%
  drink_coffee()

```

We'll go through some of the main functions in the `tidyverse` package. However, first, it can be useful to change the names of the variables to something that does not have space, as it eases the work with the variables. To do this, load the package `janitor` and use the function `clean_names`. Here, we apply the pipe to the function, which basically means; go into the object `costofliving` and use the function `clean_names` on it.

```{r, message=FALSE, warning=FALSE}

library(janitor)

costofliving <- costofliving %>%
  clean_names()

glimpse(costofliving)
```

## `select`

The function `select` picks out some variables from the dataset.

```{r, eval = FALSE}
dataset %>%
  select(variable)
```

Recall that the dataset had 7 variables; `city`, `cost_of_living_index`, `rent_index`, `cost_of_living_plus_rent_index`, `groceries_index`, `restaurant_price_index` and `local_purchasing_power_index`. If we only want a dataset with the two variables `cost_of_living_index` and `groceries_index`, we can use the `select` function.

```{r, eval = FALSE}
costofliving %>%
  select(cost_of_living_index, groceries_index) # Picking only these two variables
```

```{r, echo = FALSE}
costofliving %>%
  select(cost_of_living_index, groceries_index) %>%
  glimpse()
```

It can also be used to remove variables that we do not want in the dataset. If we want to remove more than one variable, we have to add a `c` and wrap the variables in parantheses.

```{r, eval = FALSE}
costofliving %>%
  select(-cost_of_living_index)
```

```{r, echo = FALSE}
costofliving %>%
  select(-cost_of_living_index) %>%
  glimpse()
```

```{r, eval = FALSE}
costofliving %>%
  select(-c(cost_of_living_index, groceries_index))
```

```{r, echo = FALSE}
costofliving %>%
  select(-c(cost_of_living_index, groceries_index)) %>%
  glimpse()
```

## `filter`

The function `filter` picks out some observations from the dataset.

```{r, eval = FALSE}
dataset %>%
  filter(variable_name == value)
```

Curious about which cities that have a cost of living below 100 (meaning that they are cheaper than New York)? Ask for all units that score *less than* `<` 100 on the `cost_of_living_index`.

```{r, eval = FALSE}
costofliving %>%
  filter(cost_of_living_index < 100)
```

```{r, echo = FALSE}
costofliving %>%
  filter(cost_of_living_index < 100) %>%
  glimpse()
```

Or if you want all the cities with equal `=` or higher than `>` 100 on the `cost_of_living_index`, use the code below.

```{r, eval = FALSE}
costofliving %>%
  filter(cost_of_living_index >= 100)
```

```{r, echo = FALSE}
costofliving %>%
  filter(cost_of_living_index >= 100) %>%
  glimpse()
```

Want to know about only Oslo? Then filter out the row on the `city` variable that has the value `Oslo, Norway` (in quotation marks `""`). Notice that we use two equals signs `==`. This is to not confuse `R` into thinking that city equals Oslo, Norway.

```{r, eval = FALSE}
costofliving %>%
  filter(city == "Oslo, Norway")
```

```{r, echo = FALSE}
costofliving %>%
  filter(city == "Oslo, Norway") %>%
  glimpse()
```

Want more cities at the same time? Shift `==` with `%in%` and wrap the units into parantheses with a `c` in front. Also, remember the quotation marks `""`.

```{r, eval = FALSE}
costofliving %>%
  filter(city %in% c("Oslo, Norway",
                     "Bergen, Norway",
                     "Trondheim, Norway"))
```

```{r, echo = FALSE}
costofliving %>%
  filter(city %in% c("Oslo, Norway",
                     "Bergen, Norway",
                     "Trondheim, Norway")) %>%
  glimpse()
```

## `rename`

Would you like to change the name of a variable? Use `rename`. First, write the new name of the variable, then the name of the old variable.

```{r, eval = FALSE}
dataset %>%
  rename(new_variable_name = old_variable_name)
```

In this case, I change the name an abbreviation of the variable name, so that `cost_of_living_index` becomes `cofi`.

```{r, eval = FALSE}
costofliving <- costofliving %>%
  rename(cofi = cost_of_living_index)
```

```{r, echo = FALSE}
costofliving <- costofliving %>%
  rename(cofi = cost_of_living_index)

glimpse(costofliving)
```

## `separate` and `unite`

Separate and unite allows us to split or collect two variables based on a separator.

```{r, eval = FALSE}
dataset %>%
  separate(variable_name, into = c("new_variable_name1", "new_variable_name2"), sep = "separator")

dataset %>%
  unite(new_variable_name, c("old_variable_name1", "old_variable_name2"), sep = "separator")
```

A useful thing to do here would be to separate the `city` variable into `city` and `country`. The separator in this case is a comma `,`, but it could also have been for example a dot, a space or a word such as "and".

```{r, eval=FALSE, warning=FALSE, message=FALSE, error = FALSE}
costofliving <- costofliving %>%
  separate(city, into = c("city", "country"), sep = ", ")
```

```{r, echo = FALSE, warning=FALSE, message=FALSE, error = FALSE}
costofliving <- costofliving %>%
  separate(city, into = c("city", "country"), sep = ", ")

glimpse(costofliving)
```

## `mutate`

If you would like to make a new variable, `mutate` is your go-to. First, write the name of the new variable, then add an equals sign `=`, and put the operation that you need to create your new variable.

```{r, eval = FALSE}
dataset %>%
  mutate(variable_name = operation())
```

For example, if we want a new variable with the restaurant purchasing power as a share of the local purchasing power, we can make a new variable where we divide the first by the second.

```{r, eval = FALSE}
costofliving %>%
  mutate(share_restaurant_purchasing_power = restaurant_price_index/local_purchasing_power_index)
```

```{r, echo = FALSE}
costofliving %>%
  mutate(share_restaurant_purchasing_power = restaurant_price_index/local_purchasing_power_index) %>%
  glimpse()
```

### `ifelse`

If you want to make a variable that takes the value 1 when the country is Norway, match it with `ifelse`. The `ifelse` function works like this:

If `condiction`, then give the new variable the given value, if not, give it the other value. In this case, if the variable `country` has value "Norway", give the new variable `norway` value `1`, else give the new variable value `0`.

```{r, eval = FALSE}
costofliving %>%
  mutate(norway = ifelse(country == "Norway", 1, 0))
```

```{r, echo = FALSE}
costofliving %>%
  mutate(norway = ifelse(country == "Norway", 1, 0)) %>%
  glimpse()
```

You can also overwrite new variables with the function `mutate`. For example, if you aren't happy with the fact that the `country` variable is a "character", you can change it by using the function `as_factor` together with `mutate`. Notice in the function below that the name of the new variable is the same as the name of the old variable, `country`, thus we overwrite the old one.

```{r}
class(costofliving$country)

costofliving <- costofliving %>%
  mutate(country = as_factor(country))

class(costofliving$country)
```

## `group_by` and `summarise`

At last, we can use the `summarise` function to make summaries of the dataset. This function works very well together with the function `group_by`.

```{r, eval = FALSE}
dataset %>%
  group_by(variable) %>%
  summarise(new_variable_name = function(variable_name))
```

While `summarise` gives us aggregates of the data, the `group_by` specifies which units the aggregates should be by. For example, if we ask for the `sum` of the cost of living in general in the dataset, we could just use `summarise` directly.

```{r}
costofliving %>%
  summarise(cofi = sum(cofi, na.rm = TRUE))
```

A more useful distinction is, however, to look at the cost of living for each country. Then, we `group_by` country first, and then use `summarise` and `sum`. When using `group_by`, remember to `ungroup` afterwards.

I also use `arrange` along with `desc` in this example in order to sort the countries in declining order from the ones with highest "cofi" (highest cost of living) to the lowest.

```{r}
costofliving %>%
  group_by(country) %>%
  summarise(cofi = sum(cofi, na.rm = TRUE)) %>%
  arrange(desc(cofi)) %>%
  ungroup()
```

Summarise also works with other descriptive functions such as:

-   `min` : Minimum value
-   `max` : Maximum value
-   `median` : Median
-   `mean` : Mean (average)
-   `sd` : Standard deviation

So, for example, to find the average cost of living in lagre cities in the respective countries, use `group_by`, `summarise` and `mean`.

```{r}
costofliving %>%
  group_by(country) %>%
  summarise(cofi = mean(cofi, na.rm = TRUE)) %>%
  arrange(desc(cofi)) %>%
  ungroup()
```

## Piping together

As you saw in the part above, pipes can be put in sequence. This is one of the great advantages of using pipes. Lots of code can be executed in a single "storyline" that says "first do this, then do this, then do this", and so on. Thus `tidyverse` is usually seen as a pedagogical tool because it's supposedly quite intuitive, and the code also becomes very readable. Consider the code below and decide for yourself whether you find it readable.

```{r}

costofliving %>%
  select(city, country, rent_index, restaurant_price_index, groceries_index) %>%
  filter(country %in% c("Norway", "Germany", "Spain")) %>%
  mutate(total_cost_index = rent_index + restaurant_price_index + groceries_index) %>%
  group_by(country) %>%
  mutate(max_cost = max(total_cost_index, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(highest_city = ifelse(total_cost_index == max_cost, 
                               "High living costs", 
                               "Low living costs")) %>%
  group_by(highest_city) %>%
  summarise(average_rent = mean(rent_index))

```

## Saving the dataset

When you've loaded a dataset into `R` and tidied it up a bit, you might want to save it until next time. Which format you choose depends partly on your own preferences, and party what you'd like to do further with the dataset. If you want to send it to someone else, a `.csv` is probably best. If not, I recommend `.rds` because it allows you to give a name to the object when you read it into `R`. But some people prefer `.rda` and `.RData`, and it's nice to vary a bit to see what you like best.

```{r, eval = FALSE}
write_csv(costofliving, file = "../datafolder/costofliving2.csv") # To save a .csv file

saveRDS(costofliving, file = "../datafolder/costofliving2.rds") # To save a .rds file

save(costofliving, file = "../datafolder/costofliving2.rda") # To save a .rda file

save(costofliving, file = "../datafolder/costofliving2.RData") # To save a .RData file
```
