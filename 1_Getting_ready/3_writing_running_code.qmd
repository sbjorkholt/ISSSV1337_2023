---
title: "Writing and running code"
author: "Solveig Bj√∏rkholt"
---

When you have R and RStudio installed, open RStudio. Remember that we code in R, but work in RStudio, so this is the program you typically open. Your screen should look something like this:

```{r, out.width="80%", fig.align="center", echo = FALSE}
knitr::include_graphics("../figures/rstudio_1.png")
```

We want to write our code in a script. A script is kind of like a word document, just for code. Scripts can be saved, stored and shared with others, which is preferable to the alternative - to write your code, execute it and then lose it once you close your programs and go home for the day. To start a script in RStudio, go to "File" and choose "New file", "R Script". Alternatively, click on the document with a green plus-sign in the top left hand corner and choose "R Script" - as shown below.

```{r, out.width="80%", fig.align="center", echo = FALSE}
knitr::include_graphics("../figures/rstudio_2.png")
```

The script emerges on the top left hand corner of your RStudio interface. Try typing the following into your script:

```{r, eval = FALSE}

1+1

print("Hello world!")

vector <- c(2, 5, 10, 3)

mean(vector)

paste("Hello", "World", "!")

# This is a comment.

```

```{r, out.width="80%", fig.align="center", echo = FALSE}
knitr::include_graphics("../figures/rstudio_3.png")
```

Then mark the code and click CNTR+ENTER (on Mac, it's CMD+ENTER). Then you run the code! The output from your code appears in the bottom left hand corner of your RStudio interface. This is called the "Console". It's actually where R works, so you can view it as the engine of the car. All output from your code will appear here.

```{r, out.width="80%", fig.align="center", echo = FALSE}
knitr::include_graphics("../figures/rstudio_4.png")
```

To save the script, hit the blue disc-symbol as shown in the picture below.

```{r, out.width="80%", fig.align="center", echo = FALSE}
knitr::include_graphics("../figures/rstudio_5.png")
```

## Objects

Notice that something has appeared in the upper right hand corner of your RStudio interface. This is an object. It has emerged because of this line in our script:

```{r, eval = FALSE}
vector <- c(2, 5, 10, 3)
```

This line, because of the arrow (`<-`), assigns values to an object and stores it in the short-term memory of R. The box with the object is the short-term memory, also known as "Environment". We frequently assign values to objects in R, so it's good to familiarize yourself with this now. Think: Whenever you want to use an object later, make an object of it.

In general, to make an object, choose whichever name you like, add an arrow towards the name of the object, and then add the operation you want done. If you want to combine several elements, e.g. several numbers or several words, you need to put a c in front of your parentheses. `c` stands for "combine". For example:

```{r, eval = FALSE}

numberone <- 1

numbers <- c(1, 2, 3, 4, 5)

meanofnumbers <- mean(c(1, 2, 3, 4, 5))

names <- c("Billy", "Joe", "Vera")

```

Why did we call the object "vector" in the first place? Because it *is* a vector. You can think of vectors as a sequence of information, for example a bunch of numbers or a bunch of names. `numberone`, `meanofnumbers`, `numbers` and `names` are all vectors. There are other types of objects in R. The ones we will learn are: vector, dataframe, matrix and list. The difference between them is this:

-   Vectors have the same data type and amount to *one* variable.
-   Dataframes can have different data types and amount to *several* variables.
-   Matrices have the same data type and amount to *several* variables.
-   Lists have several types of data types and amount to *one* or *several* variables.[^3_writing_running_code-1]

[^3_writing_running_code-1]: Some illustrations of data objects in R also operate with arrays, but we will not focus on that here.

```{r, out.width="80%", fig.align="center", echo = FALSE}
knitr::include_graphics("../figures/objects.png")
```

To know what an object contains, try writing the name of the object and run it[^3_writing_running_code-2].

[^3_writing_running_code-2]: To "run a code" means to mark it and hit CNTR+ENTER

## Data types

What does "data type" mean, then? Well, R has several data types and we will focus on four[^3_writing_running_code-3]. These are `numeric`, `integer`, `character`, `factor` and `logical`, and they are also called *classes*. They differ from each other in the types of data they store, be it strings, numbers or logical values.

[^3_writing_running_code-3]: Some people also add "complex" as a data type, but this is outside our scope.

| Data type   |                        Properties                        |
|-------------|:--------------------------------------------------------:|
| `numeric`   | contains decimal and whole numbers, also called "double" |
| `integer`   |               contains only whole numbers                |
| `character` |           contains character strings ("words")           |
| `factor`    |     contains categories (either ranked or unranked)      |
| `logical`   |         contains only two values, TRUE and FALSE         |

Numbers and integers can be one number, sequences of numbers, or mathematical expressions. For example:

```{r, eval = FALSE}

100 

1 + 100 + 20

1.4353 # commas are written as dots (.)

1.5 + 2.9 - 8.3

2 * 8 # multiply is written as star (*)

9 / 3 # divide is written as slash (/)

c(3, 100, 203.4, 15000)

```

Strings are sequences of characters, often words. We need to surround them in quotation marks. For example:

```{r, eval = FALSE}

"A"

c("A", "B") # If "A" and "B" were two categories, this object could also be a factor.

"Hello"

"We are learning R!"

c("Hello.", "We are learning R!")

```

Logical vectors take two values; TRUE and FALSE.

```{r, eval = FALSE}

TRUE

FALSE

c(TRUE, FALSE, FALSE, FALSE, TRUE)

```

To check the data type, use the function `class()`.

```{r}

class(100)
class("A")
class(FALSE)

```

## Logical operators

At last, we can use different operators to check whether to objects are equal to each other. We wil not delve into this now, but I leave this here because it might be useful later.

| Operator |        Meaning        |
|----------|:---------------------:|
| `==`     |        equals         |
| `<`      |       less than       |
| `>`      |      bigger than      |
| `<=`     |  less than or equals  |
| `>=`     | bigger than or equals |
| `!=`     |    does not equal     |
| `!x`     |   does not equal x    |
| `|`      |          or           |
| `&`      |          and          |

# Calling functions

As you can see, we can use R as a calculator if we want to. Writing `1+1` gives `2` in the Console. But the real power of R comes from running functions. A function is a command that tells R what to do with something. We've already seen a few functions so far, for example `print()`, `mean()` and `class()`. `print()` tells R to give us the output of an object, `mean()` tells R to calculate the average of an object, and `class()` tells R to give us the data type of an object.

Learning functions is a bit like learning vocabulary in a language, so don't fret if you find yourself grasping for the name of a function. It's the same as when you somewhat know a language and can't really recall a word. The solution? Ask someone or look it up on the internet.

## Packages

Most functions we get from packages. Packages are bundles of functions that we import to R, and they are made by the wide community of people out there who work on R-content. For example, `stringr` is a package that gives us a lot of functions we can use to work with strings (i.e. character things). Some of these functions are `str_to_lower()`, which make all characters into lower case, `str_repalce`, which takes part of a string and replaces it with something else, and `sub_str()`, which takes out a part of a string.

```{r, out.width="80%", fig.align="center", echo = FALSE}
knitr::include_graphics("../figures/packages.png")
```

To get a package into R, we first have to install it (from the world wide web), then import it (telling R that we want to use it in this script).

To install a package, use the function `install.packages()` and put the name of the package in quotation marks. You only need to do this *once* (unless you uninstall and reinstall R, or want to update your packages to newer versions). So no need to populate your script with `install.packages()`.

```{r, eval = FALSE}

install.packages("stringr")

```

To import a package, use the function `library()`. Here, you do not need quotation marks.

```{r}

library(stringr)

```

Once this is in order, we can start using functions from the package `stringr`. A full overview of all the functions in a package is available on the internet through a document that all package-makers have to make for their package. In the case of `stringr`, a quick internet search leads us to [this document](https://cran.r-project.org/web/packages/stringr/stringr.pdf).

Let's try some of the functions!

```{r}

string <- "This is a string, meaning a sequence of characters, typically words. It is also a vector, since it contains information of one data type - namely character."

print(string)

str_to_lower(string) # Sets all characters to lower case.

str_replace(string, "This is a string, meaning a", "A string is a") # Replaces some parts of a string with something else.

str_sub(string, 1, 16) # Picks out characters from place 1 to place 16.

```

## Your own functions

You can make your own functions too.

```{r}

make_lower_and_pick_start <- function(x){
  
  x <- str_to_lower(x)
  x <- str_sub(x, 1, 16)
  
  return(x)
  
}

make_lower_and_pick_start(string)

```
